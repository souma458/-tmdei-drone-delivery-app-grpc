version: "3.8"

services:
  scheduler:
    container_name: scheduler
    build:
      context: scheduler-service
      dockerfile: Dockerfile
    ports:
      - "${SCHEDULER_SERVICE_PORT}:${INTERNAL_PORT}"
    restart: always
    environment:
      GRPC_CLIENT_DELIVERY-MANAGEMENT_ADDRESS: $DELIVERY_SERVICE_ADDRESS
      GRPC_CLIENT_DELIVERY-MANAGEMENT_NEGOTIATION-TYPE: plaintext
    networks:
      - backend

  delivery-management:
    container_name: delivery-management
    build:
      context: delivery-management
      dockerfile: Dockerfile
    ports:
      - "${DELIVERY_SERVICE_PORT}:${INTERNAL_PORT}"
    restart: always
    depends_on:
      - mongodb
    environment:
      HOST: delivery-management
      PORT: ${INTERNAL_PORT}
      MONGODB_URI: mongodb://mongodb/delivery_db
    networks:
      - backend

  third-party-transportation-management:
    container_name: third-party-transportation-management
    build:
      context: third-party-transportation-service
      dockerfile: Dockerfile
    ports:
      - "${THIRD_PARTY_TRANSPORTATION_SERVICE_PORT}:${INTERNAL_PORT}"
    restart: always
    depends_on:
      - mongodb
    environment:
      HOST: third-party-transportation-management
      PORT: ${INTERNAL_PORT}
      MONGODB_URI: mongodb://mongodb/third_party_transportation_db
    networks:
      - backend

  package-management:
    container_name: package-management
    build:
      context: package-management
      dockerfile: Dockerfile
    ports:
      - "${PACKAGE_SERVICE_PORT}:${INTERNAL_PORT}"
    restart: always
    depends_on:
      - mongodb
    environment:
      HOST: package-management
      PORT: ${INTERNAL_PORT}
      MONGODB_URI: mongodb://mongodb/package_db
    networks:
      - backend

  drone-management:
    container_name: drone-management
    build:
      context: drone-management
      dockerfile: Dockerfile
    ports:
      - "${DRONE_SERVICE_PORT}:${INTERNAL_PORT}"
    restart: always
    depends_on:
      - mysqldb
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://mysqldb:3306/drone_db
      SPRING_DATASOURCE_USERNAME: $DRONE_DB_USERNAME
      SPRING_DATASOURCE_PASSWORD: $DRONE_DB_PASSWORD
    networks:
      - backend

  user-management:
    container_name: user-management
    build:
      context: user-management
      dockerfile: Dockerfile
    ports:
      - "${USER_SERVICE_PORT}:${INTERNAL_PORT}"
    restart: always
    depends_on:
      - mysqldb
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://mysqldb:3306/user_db
      SPRING_DATASOURCE_USERNAME: $USER_ACCOUNT_DB_USERNAME
      SPRING_DATASOURCE_PASSWORD: $USER_ACCOUNT_DB_PASSWORD
    networks:
      - backend

  mysqldb:
    container_name: mysqldb
    build:
      context: database/mysql
      dockerfile: Dockerfile
    ports:
      - "3306:3306"
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: root
    networks:
      - backend

  mongodb:
    container_name: mongodb
    build:
      context: database/mongodb
      dockerfile: Dockerfile
    ports:
      - 27017:27017
    restart: always
    networks:
      - backend

networks:
  backend:
