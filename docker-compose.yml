version: "3.8"

services:
  scheduler:
    container_name: scheduler
    build:
      context: scheduler-service
      dockerfile: Dockerfile
    ports:
      - "${SCHEDULER_SERVICE_PORT}:${INTERNAL_PORT}"
    restart: always
    environment:
      USER-SERVICE_URL: $USER_SERVICE_URL
      DELIVERY-SERVICE_URL: $DELIVERY_SERVICE_URL
      PACKAGE-SERVICE_URL: $PACKAGE_SERVICE_URL
      DRONE-SERVICE_URL: $DRONE_SERVICE_URL
      THIRD-PARTY-TRANSPORTATION-SERVICE_URL: $THIRD_PARTY_TRANSPORTATION_SERVICE_URL
    networks:
      - backend

  delivery-management:
    container_name: delivery-management
    build:
      context: delivery-management
      dockerfile: Dockerfile
    ports:
      - "${DELIVERY_SERVICE_PORT}:${INTERNAL_PORT}"
    restart: always
    depends_on:
      - mongodb
    environment:
      HOST: delivery-management
      PORT: ${INTERNAL_PORT}
      MONGODB_URI: mongodb://mongodb/delivery_db
    networks:
      - backend

  mysqldb:
    container_name: mysqldb
    build:
      context: database/mysql
      dockerfile: Dockerfile
    ports:
      - "3306:3306"
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: root
    networks:
      - backend

  mongodb:
    container_name: mongodb
    build:
      context: database/mongodb
      dockerfile: Dockerfile
    ports:
      - 27017:27017
    restart: always
    networks:
      - backend

networks:
  backend:
